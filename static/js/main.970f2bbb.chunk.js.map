{"version":3,"sources":["Counter.js","Actions.js","App.js","reportWebVitals.js","Reducer.js","store.js","index.js"],"names":["Counter","React","useState","count","setCount","dispatch","useDispatch","style","display","justifyContent","onClick","type","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","INCREMENT","DECREMENT","initialState","Reducer","state","action","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+MAoCeA,MAhCf,WAAmB,IAAD,EAGYC,IAAMC,SAAS,GAH3B,mBAGPC,EAHO,KAGAC,EAHA,KAIRC,EAAWC,cAapB,OACW,gCACI,oDAAgBH,GAAhB,OACA,sBAAKI,MAAO,CAAEC,QAAS,OAAQC,eAAgB,UAA/C,UACI,wBAAQC,QAfA,WACpBL,ECTG,CAACM,KAAK,cDUTP,EAASD,EAAQ,IAaL,yBACA,wBAAQO,QAXA,WACpBL,ECXG,CAACM,KAAK,cDYTP,EAASD,EAAQ,IASL,gCEbLS,MAVf,WACE,OACE,sBAAKC,UAAU,MAAf,UACC,yDACA,cAAC,EAAD,QCKUC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCPRQ,EAAW,YACXC,EAAW,YAEXC,EAAa,CACftB,MAAM,GAgBKuB,MAXf,WAA4C,IAA3BC,EAA0B,uDAApBF,EAAaG,EAAO,uCACvC,OAAOA,EAAOjB,MACV,KAAKY,EACD,MAAO,CAACpB,MAAOwB,EAAMxB,MAAQ,GACjC,KAAKqB,EACD,MAAO,CAACrB,MAAOwB,EAAMxB,MAAQ,GACjC,QACI,OAAOwB,ICVJE,EAFDC,YAAYJ,GCM1BK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SACE,cAAC,EAAD,QAIJK,SAASC,eAAe,SAM1BrB,M","file":"static/js/main.970f2bbb.chunk.js","sourcesContent":["import React from \"react\";\nimport { useDispatch,useSelector } from \"react-redux\";\nimport { increment, decrement } from \"./Actions\";\n\nfunction Counter(){\n   \n   \n    const [count, setCount] = React.useState(0);\n    const dispatch = useDispatch();\n\n    const handleIncrement = () => {\n        dispatch(increment());\n        setCount(count - 1);\n      \n      };\n    const handleDecrement = () => {\n        dispatch(decrement());\n        setCount(count - 1);\n      };\n    \n    \n return(\n            <div>\n                <h3> {`Count: ${count}`} </h3>\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n                    <button onClick={handleIncrement}> Increment </button>\n                    <button onClick={handleDecrement}> Decrement </button>\n                </div>\n            </div>\n           \n\n\n        );\n    \n}\n\nexport default Counter;\n//<h3> {`Count: ${count}`} </h3>","\nexport const increment=()=>{\n    return {type:'INCREMENT'}\n}\nexport const decrement=()=>{\n    return {type:'DECREMENT'}\n}\n\n/*\nexport const incrementCount = count => {\n  const num = count+1\n  return {\n  type: 'INCREMENT_COUNT',\n  count: num\n  }\n}\n\nexport const decrementCount = count => {\n  const num = count - 1\n  return {\n    type: 'DECREMENT_COUNT',\n    count: num\n  }\n}\n*/","import React from \"react\";\nimport './App.css';\nimport Counter from './Counter';\nfunction App() {\n  return (\n    <div className=\"App\">\n     <h1>Counter App Using Redux</h1>\n     <Counter/>     \n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const INCREMENT =\"increment\"\nconst DECREMENT =\"decrement\"\n\nconst initialState={\n    count:0\n}\n\n\n\nfunction Reducer(state=initialState,action){\n    switch(action.type){\n        case INCREMENT:\n            return {count: state.count + 1}\n        case DECREMENT:\n            return {count: state.count - 1}\n        default:\n            return state\n        }\n    }\n   \nexport default Reducer;\n\n/*const initialState = {\n    count: 0,\n}\n\nfunction CounterReducer (state = initialState, action){\n    switch(action.type){\n        case \"INCREMENT_COUNT\": {\n            return {...state, ...action}\n        }\n        case \"DECREMENT_COUNT\": {\n            return {...state, ...action}\n        }\n        default:\n            return state\n    }\n} \n\nexport default CounterReducer\n*/","import { createStore } from \"redux\";\nimport Reducer from \"./Reducer\";\n\n\nconst store = createStore(Reducer);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport {Provider } from 'react-redux';\nimport store from './store';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n\n    </Provider>    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}